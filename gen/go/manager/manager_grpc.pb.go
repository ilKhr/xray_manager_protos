// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: manager/manager.proto

package xraymanager

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	XrayManager_CreateConfig_FullMethodName   = "/xraymanager.v1.XrayManager/CreateConfig"
	XrayManager_RegenerateKeys_FullMethodName = "/xraymanager.v1.XrayManager/RegenerateKeys"
	XrayManager_AddUser_FullMethodName        = "/xraymanager.v1.XrayManager/AddUser"
	XrayManager_RemoveUser_FullMethodName     = "/xraymanager.v1.XrayManager/RemoveUser"
	XrayManager_StopXray_FullMethodName       = "/xraymanager.v1.XrayManager/StopXray"
	XrayManager_StartXray_FullMethodName      = "/xraymanager.v1.XrayManager/StartXray"
	XrayManager_ChangeDest_FullMethodName     = "/xraymanager.v1.XrayManager/ChangeDest"
)

// XrayManagerClient is the client API for XrayManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XrayManagerClient interface {
	// create config
	CreateConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicKeyResponse, error)
	// regenerate keys
	RegenerateKeys(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicKeyResponse, error)
	// add user
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// remove user
	RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// stop xray
	StopXray(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	// start xray
	StartXray(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	// change destination
	ChangeDest(ctx context.Context, in *ChangeDestRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type xrayManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewXrayManagerClient(cc grpc.ClientConnInterface) XrayManagerClient {
	return &xrayManagerClient{cc}
}

func (c *xrayManagerClient) CreateConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicKeyResponse)
	err := c.cc.Invoke(ctx, XrayManager_CreateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xrayManagerClient) RegenerateKeys(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicKeyResponse)
	err := c.cc.Invoke(ctx, XrayManager_RegenerateKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xrayManagerClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, XrayManager_AddUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xrayManagerClient) RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, XrayManager_RemoveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xrayManagerClient) StopXray(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, XrayManager_StopXray_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xrayManagerClient) StartXray(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, XrayManager_StartXray_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xrayManagerClient) ChangeDest(ctx context.Context, in *ChangeDestRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, XrayManager_ChangeDest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XrayManagerServer is the server API for XrayManager service.
// All implementations must embed UnimplementedXrayManagerServer
// for forward compatibility.
type XrayManagerServer interface {
	// create config
	CreateConfig(context.Context, *Empty) (*PublicKeyResponse, error)
	// regenerate keys
	RegenerateKeys(context.Context, *Empty) (*PublicKeyResponse, error)
	// add user
	AddUser(context.Context, *AddUserRequest) (*StatusResponse, error)
	// remove user
	RemoveUser(context.Context, *RemoveUserRequest) (*StatusResponse, error)
	// stop xray
	StopXray(context.Context, *Empty) (*StatusResponse, error)
	// start xray
	StartXray(context.Context, *Empty) (*StatusResponse, error)
	// change destination
	ChangeDest(context.Context, *ChangeDestRequest) (*StatusResponse, error)
	mustEmbedUnimplementedXrayManagerServer()
}

// UnimplementedXrayManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedXrayManagerServer struct{}

func (UnimplementedXrayManagerServer) CreateConfig(context.Context, *Empty) (*PublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfig not implemented")
}
func (UnimplementedXrayManagerServer) RegenerateKeys(context.Context, *Empty) (*PublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateKeys not implemented")
}
func (UnimplementedXrayManagerServer) AddUser(context.Context, *AddUserRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedXrayManagerServer) RemoveUser(context.Context, *RemoveUserRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedXrayManagerServer) StopXray(context.Context, *Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopXray not implemented")
}
func (UnimplementedXrayManagerServer) StartXray(context.Context, *Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartXray not implemented")
}
func (UnimplementedXrayManagerServer) ChangeDest(context.Context, *ChangeDestRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDest not implemented")
}
func (UnimplementedXrayManagerServer) mustEmbedUnimplementedXrayManagerServer() {}
func (UnimplementedXrayManagerServer) testEmbeddedByValue()                     {}

// UnsafeXrayManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XrayManagerServer will
// result in compilation errors.
type UnsafeXrayManagerServer interface {
	mustEmbedUnimplementedXrayManagerServer()
}

func RegisterXrayManagerServer(s grpc.ServiceRegistrar, srv XrayManagerServer) {
	// If the following call pancis, it indicates UnimplementedXrayManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&XrayManager_ServiceDesc, srv)
}

func _XrayManager_CreateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XrayManagerServer).CreateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XrayManager_CreateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XrayManagerServer).CreateConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _XrayManager_RegenerateKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XrayManagerServer).RegenerateKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XrayManager_RegenerateKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XrayManagerServer).RegenerateKeys(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _XrayManager_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XrayManagerServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XrayManager_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XrayManagerServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XrayManager_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XrayManagerServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XrayManager_RemoveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XrayManagerServer).RemoveUser(ctx, req.(*RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XrayManager_StopXray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XrayManagerServer).StopXray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XrayManager_StopXray_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XrayManagerServer).StopXray(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _XrayManager_StartXray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XrayManagerServer).StartXray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XrayManager_StartXray_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XrayManagerServer).StartXray(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _XrayManager_ChangeDest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeDestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XrayManagerServer).ChangeDest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XrayManager_ChangeDest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XrayManagerServer).ChangeDest(ctx, req.(*ChangeDestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// XrayManager_ServiceDesc is the grpc.ServiceDesc for XrayManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XrayManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xraymanager.v1.XrayManager",
	HandlerType: (*XrayManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConfig",
			Handler:    _XrayManager_CreateConfig_Handler,
		},
		{
			MethodName: "RegenerateKeys",
			Handler:    _XrayManager_RegenerateKeys_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _XrayManager_AddUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _XrayManager_RemoveUser_Handler,
		},
		{
			MethodName: "StopXray",
			Handler:    _XrayManager_StopXray_Handler,
		},
		{
			MethodName: "StartXray",
			Handler:    _XrayManager_StartXray_Handler,
		},
		{
			MethodName: "ChangeDest",
			Handler:    _XrayManager_ChangeDest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager/manager.proto",
}
